package Anagram;
# vim: noet:

use 5.016;
use warnings;
use utf8;
use Encode qw(decode_utf8 encode_utf8);
=encoding UTF8

=head1 SYNOPSIS

Поиск анаграмм

=head1 anagram($arrayref)

Функция поиска всех множеств анаграмм по словарю.

Входные данные для функции: ссылка на массив - каждый элемент которого - слово на русском языке в кодировке utf8

Выходные данные: Ссылка на хеш множеств анаграмм.

Ключ - первое встретившееся в словаре слово из множества
Значение - ссылка на массив, каждый элемент которого слово из множества, в том порядке в котором оно встретилось в словаре в первый раз.

Множества из одного элемента не должны попасть в результат.

Все слова должны быть приведены к нижнему регистру.
В результирующем множестве каждое слово должно встречаться только один раз.
Например

anagram(['пятак', 'ЛиСток', 'пятка', 'стул', 'ПяТаК', 'слиток', 'тяпка', 'столик', 'слиток'])

должен вернуть ссылку на хеш


{
	'пятак'  => ['пятак', 'пятка', 'тяпка'],
	'листок' => ['листок', 'слиток', 'столик'],
}

=cut

#33 prime numbers for anagram-hash
my @primes = (1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137);

my $i = 0;
my %primes = map {($_, $primes[$i++])} qw(- а б в г д е ё ж з и й к л м н о п р с т у ф х ц ч ш щ ъ ы ь э ю я);

sub anagram_hash($) {
	my $hash = 1;
	for my $chr (split("", $_[0])) {
		$hash *= $primes{$chr};
	}
	$hash;
}

sub anagram($) {
	my %anagrams;
	my %unique_words;
	for my $word (@{$_[0]}) {
		my $lc_word = lc(decode_utf8($word));
		my $hash = anagram_hash($lc_word);
		if (!$unique_words{$lc_word}++) {
			push @{$anagrams{$hash}}, encode_utf8($lc_word);
		}
	}
	my %res = map {$_->[0], [sort {$a cmp $b} @$_]} grep {@$_ > 1} values %anagrams;
	return \%res;
}

1;
